/*	Startup. js 	Runs right after sever starts.*///Set up the connection to server side databaseds.Memory.all().remove();ds.CPU.all().remove();ds.Disk.all().remove();ds.Connections.all().remove(); ds.ConnectionDetail.all().remove();   var mysql = require('waf-mysql');var params = {    hostname: 'ec2-54-242-135-175.compute-1.amazonaws.com',    user: 'root',    password: '',    database: 'cmpe295b',    port: 3306,  //3306 by default    ssl: false};// server ec2-54-242-135-175.compute-1.amazonaws.com// agent ec2-23-22-188-104.compute-1.amazonaws.comvar dbconn = mysql.connect(params); //use dbconn to manage data// process data using Client methods//var cpuRes = dbconn.select("metric_name, metric_value, date_entry", "metrics", {metric_name:'CPU'});//var cpuArray = cpuRes.getAllRows();//if (cpuArray.length > 0) {//    for (cpuRecordCount in cpuArray) {//        var cpuRecord = cpuArray[cpuRecordCount];//        if (cpuRecord) {//        	var dateEntryArray = cpuRecord.date_entry.split(" ");//        	var dateString = cpuRecord.date_entry[0];//        	var timeString = cpuRecord.date_entry[1];//            var newCPUEntity = ds.CPU.createEntity();//            newCPUEntity.percentage = cpuRecord.metric_value;//            newCPUEntity.dateOfEntry = cpuRecord.date_entry;//            newCPUEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);//            //newCPUEntity.save();//        }//    }//}//var res1 = dbconn.select('*','metrics');//if (res1.isSelect() & !res1.isError()) {//Read Memories data from remote database//var allRes = dbconn.execute("SELECT * FROM metrics WHERE date_entry >= '2012-12-04 08:54:01' AND metric_name LIKE '%_MEMORY%'"); //gets the first resulting row//memRes.getAllRows();var allRes = dbconn.execute("SELECT * FROM metrics WHERE date_entry >= '2012-12-06 08:54:01' ");while(allRes.hasNext()) {		var resObj = allRes.getNextRow();	var metric_name = resObj.metric_name;	var agentID = metric_name.split("_")[0];	var metricName = metric_name.split("_")[1]	//console.log(agentID);	//console.log(metricName);			if (resObj.metric_name.indexOf("Amazon Memory") != -1) {        var newMemEntity = ds.Memory.createEntity();        newMemEntity.usage = parseInt(resObj.metric_value);        newMemEntity.dateOfEntry = resObj.date_entry;        newMemEntity.isFromAmazon = true;        newMemEntity.saasInstance = ds.SaasInstance.find('agentID = :1', agentID);        newMemEntity.save();    }    else if (resObj.metric_name.indexOf("MEMORY") != -1) {    	var newMemEntity = ds.Memory.createEntity();        newMemEntity.usage = parseInt(resObj.metric_value);        newMemEntity.dateOfEntry = resObj.date_entry;        newMemEntity.isFromAmazon = false;        newMemEntity.saasInstance = ds.SaasInstance.find('agentID = :1', agentID);        newMemEntity.save();    }     else if (resObj.metric_name.indexOf("Hard Disk") != -1) {    	var newDiskEntity = ds.Disk.createEntity();        newDiskEntity.allocated = parseInt(resObj.metric_value);        newDiskEntity.dateOfEntry = resObj.date_entry;        newDiskEntity.saasInstance = ds.SaasInstance.find('agentID = :1', agentID);        newDiskEntity.save();    }    else if (resObj.metric_name.indexOf("Amazon CPU") != -1) {    	var newCPUEntity = ds.CPU.createEntity();        newCPUEntity.percentage = parseInt(resObj.metric_value);        newCPUEntity.dateOfEntry = resObj.date_entry;        newCPUEntity.saasInstance = ds.SaasInstance.find('agentID = :1', agentID);        newCPUEntity.isFromAmazon = true;        newCPUEntity.save();    }     else if (resObj.metric_name.indexOf("CPU") != -1) {    	var newCPUEntity = ds.CPU.createEntity();        newCPUEntity.percentage = parseInt(resObj.metric_value);        newCPUEntity.dateOfEntry = resObj.date_entry;        newCPUEntity.saasInstance = ds.SaasInstance.find('agentID = :1', agentID);        newCPUEntity.isFromAmazon = false;        newCPUEntity.save();    }    else if (resObj.metric_name.indexOf("Connections") != -1) {    	var conEntity = ds.Connections.find('dateOfEntry = :1', resObj.date_entry);    	//var conDetailPattern = "(\S*)\s*\d\s*\d\s(\S*):(\S*)\s(\S*):(\S*)\s(\S*)";    	var conDetailResult = resObj.metric_value.match(/(\S*)\s*\d\s*\d\s(\S*):(\S*)\s(\S*):(\S*)\s(\S*)/);    	console.log(resObj.metric_value + "    " + conDetailResult);    	if(conDetailResult) {	    	if(conEntity) {		        var newConDetailEntity = ds.ConnectionDetail.createEntity();		        newConDetailEntity.connectionsCroup = conEntity;		        newConDetailEntity.remote = conDetailResult[4]		        newConDetailEntity.remotePort = conDetailResult[5]		        newConDetailEntity.local = conDetailResult[2]		        newConDetailEntity.localPort = conDetailResult[3]		        newConDetailEntity.type = conDetailResult[1];		        newConDetailEntity.state = conDetailResult[6];		        newConDetailEntity.save();	        }	        else {	        	var newConEntity = ds.Connections.createEntity();		        newConEntity.dateOfEntry = resObj.date_entry;		        newConEntity.saasInstance = ds.SaasInstance.find('agentID = :1', agentID);		        newConEntity.save();		       	var newConDetailEntity = ds.ConnectionDetail.createEntity();		        newConDetailEntity.connectionsCroup = newConEntity;		        newConDetailEntity.remote = conDetailResult[4]		        newConDetailEntity.remotePort = conDetailResult[5]		        newConDetailEntity.local = conDetailResult[2]		        newConDetailEntity.localPort = conDetailResult[3]		        newConDetailEntity.type = conDetailResult[1];		        newConDetailEntity.state = conDetailResult[6];		        newConDetailEntity.save();	        }        }    }}dbconn.close();/*if (memRes.isSelect() & !memRes.isError()) {    var latestEntriesArray = memRes.getAllRows();    for (i in latestEntriesArray) {        var memeObj = latestEntriesArray[i];        var newMemEntity = ds.Memory.createEntity();        //memeObj.metric_value.length < 4?newMemEntity.usage = memeObj.metric_value: newMemEntity.usage = 11;        newMemEntity.usage = parseInt(memeObj.metric_value);        newMemEntity.dateOfEntry = memeObj.date_entry;        newMemEntity.isFromAmazon = false;        newMemEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);        newMemEntity.save();    }}var amazonMemRes = dbconn.execute("SELECT * FROM metrics WHERE metric_name = 'Amazon Memory' && id >= 20000"); //gets the first resulting rowif (amazonMemRes.isSelect() & !amazonMemRes.isError()) {    var latestEntriesArray = amazonMemRes.getAllRows();    for (i in latestEntriesArray) {        var memeObj = latestEntriesArray[i];        var newMemEntity = ds.Memory.createEntity();        //memeObj.metric_value.length < 4?newMemEntity.usage = memeObj.metric_value: newMemEntity.usage = 11;        newMemEntity.usage = parseInt(memeObj.metric_value);        newMemEntity.dateOfEntry = memeObj.date_entry;        newMemEntity.isFromAmazon = true;        newMemEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);        newMemEntity.save();    }}//Read CPU data from remote databasevar cpuRes = dbconn.execute("SELECT * FROM metrics WHERE metric_name = 'CPU' && id >= 20000"); //gets the first resulting rowif (cpuRes.isSelect() & !cpuRes.isError()) {    var cpusArray = cpuRes.getAllRows();    for (i in cpusArray) {        var cpuObj = cpusArray[i];        var newCPUEntity = ds.CPU.createEntity();        //memeObj.metric_value.length < 4?newMemEntity.usage = memeObj.metric_value: newMemEntity.usage = 11;        newCPUEntity.percentage = Math.floor((Math.random()*20)+1);        newCPUEntity.dateOfEntry = cpuObj.date_entry;        newCPUEntity.isFromAmazon = false;        newCPUEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);        newCPUEntity.save();    }}var amazonCpuRes = dbconn.execute("SELECT * FROM metrics WHERE metric_name = 'Amazon CPU' && id >= 20000"); //gets the first resulting rowif (amazonCpuRes.isSelect() & !amazonCpuRes.isError()) {    var cpusArray = amazonCpuRes.getAllRows();    for (i in cpusArray) {        var cpuObj = cpusArray[i];        var newCPUEntity = ds.CPU.createEntity();        //memeObj.metric_value.length < 4?newMemEntity.usage = memeObj.metric_value: newMemEntity.usage = 11;        newCPUEntity.percentage = Math.floor((Math.random()*20)+1);        newCPUEntity.dateOfEntry = cpuObj.date_entry;        newCPUEntity.isFromAmazon = true;        newCPUEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);        newCPUEntity.save();    }}//Read DISK data from remote databasevar diskRes = dbconn.execute("SELECT * FROM metrics WHERE metric_name = 'Hard Disk' && id >= 20000"); //gets the first resulting rowif (diskRes.isSelect() & !diskRes.isError()) {    var disksArray = diskRes.getAllRows();    for (i in disksArray) {        var diskObj = disksArray[i];        var newDiskEntity = ds.Disk.createEntity();        //memeObj.metric_value.length < 4?newMemEntity.usage = memeObj.metric_value: newMemEntity.usage = 11;        newDiskEntity.allocated = parseInt(diskObj.metric_value);        newDiskEntity.dateOfEntry = diskObj.date_entry;        newDiskEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);        newDiskEntity.save();    }}//Read Connectivity data from remote databasedbconn.close();var dbconn = mysql.connect(params); var conRes = dbconn.execute("SELECT * FROM metrics WHERE metric_name = 'Connections' && id >= 20000 ");if (conRes.isSelect() & !conRes.isError()) {    var consArray = conRes.getAllRows();    for (i in consArray) {        var conObj = consArray[i];        var newConEntity = ds.Connections.createEntity();        var connectonsInfo = diskObj.metric_value + "httpd 13742 apache 44u IPv6 1453648 0t0 TCP domU-12-31-39-0A-1C-E9.compute-1.internal:34420->72.21.211.93:3306 (ESTABLISHED)"		var connectionsArray = connectonsInfo.split(")");                newConEntity.dateOfEntry = conObj.date_entry.toString();        newConEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);        newConEntity.save();                for (i in connectionsArray) {        	if(connectionsArray[i].indexOf(":")) {		        var newConDetail = ds.ConnectionDetail.createEntity();		        newConDetail.connectionsCroup = newConEntity;		        newConDetail.target = '72.21.211.93:https';		        newConDetail.source = 'domU-12-31-39-0A-1C-E9.compute-1.internal:34420';		        newConDetail.type = 'TCP';		        newConDetail.state = 'ESTABLISHED';		        newConDetail.save();		    }    	}    }}dbconn.close();//var newConEntity = ds.Connections.createEntity();//    var currentDate = new Date();//    currentDate.setSeconds(currentDate.getSeconds() + (60 * (1)));//    newConEntity.dateOfEntry = currentDate.toString();//    console.log(newConEntity.dateOfEntry);//    newConEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);//    newConEntity.save();//    for (i in connectionsArray) {//        var newConDetail = ds.ConnectionDetail.createEntity();//        newConDetail.connectionsCroup = newConEntity;//        newConDetail.target = '72.21.211.93:https';//        newConDetail.source = 'domU-12-31-39-0A-1C-E9.compute-1.internal:34420';//        newConDetail.type = 'TCP';//        newConDetail.state = 'ESTABLISHED';//        newConDetail.save();//    }//}//var memRes = dbconn.execute("SELECT * FROM metrics WHERE metric_name = 'Memory' " );////var memRes = dbconn.select("id, metric_name, metric_value, date_entry", "metrics",{metric_name:'Memory'});//console.log(memRes.getRowsCount());////var memArray = memRes.getAllRows();//while(memRes.hasNext() & !memRes.isError()) {//	var memeObj = memRes.getNextRow();//	         var newMemEntity = ds.Memory.createEntity();//            //memeObj.metric_value.length < 4?newMemEntity.usage = memeObj.metric_value: newMemEntity.usage = 11;//            if (memeObj.metric_value.length < 6) newMemEntity.usage = 13;//            if (memeObj.date_entry.length < 20) newMemEntity.dateOfEntry = memeObj.date_entry;//            newMemEntity.saasInstance = ds.SaasInstance.find('ID = :1', 1);//            newMemEntity.save();//	console.log(newMemEntity);//}//var diskRes = dbconn.select("id, metric_name, metric_value, date_entry", "metrics", {metric_name:'Hard Disk'});////var diskArray = diskRes.getAllRows();//console.log(diskRes.getRowsCount());//diskRes.skipRows(diskRes.getRowsCount() - 1);//while(diskRes.hasNext() & !diskRes.isError()) {//	var diskObj = diskRes.getNextRow();//	console.log(diskObj);//}//var connRes = dbconn.select("metric_name, metric_value, date_entry", "metrics", {metric_name:'Connections'});//var connArray = connRes.getAllRows(); // close connection*/